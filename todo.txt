ldap.host=ldap://ad-ldap-prod.uhc.com
ldap.port=389
ldap.domain=ms
ldap.searchBase=dc=ms,dc=ds,dc=uhc,dc=com
ldap.searchFilter=(&(objectClass=person)(cn=
ldap.contextfactory=com.sun.jndi.ldap.LdapCtxFactory





package com.uhg.pdut.util;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.naming.AuthenticationException;
import javax.naming.Context;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attributes;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;

import org.apache.log4j.Logger;

import com.uhg.pdut.beans.User;

import netscape.ldap.LDAPConnection;

/**
* This class does the ldap authentication for given msid/password.
* @author pgarg104
*
*/

public class LdapConnector {

               static String ldapHost = null;
               static StringBuilder userId = null;
               static String password = null;
               static LDAPConnection ldapConn = null;
               static boolean matchFound = false;
               static String searchBase = null;
               static String domain = null;
               static String searchFilter = null;
               static String filter = null;
               static String contextFactory = null;

               private static final Logger logger = Logger.getLogger(LdapConnector.class);

               /**
               * Checks if the given ldap details are authenticated.
               * @param user
               * @return
               * @throws Exception
                */
               public static Map<String , String> extract(User user) throws Exception {

                              LdapContext ldap = null;
                              StringBuilder ldapDetails = new StringBuilder();
                              StringBuilder groupsValues=new StringBuilder();
                              HashMap<String, String> map = new HashMap<>();
                              try {
                                             init();
                                             filter =  searchFilter + user.getMsId() + "))";
                                             final SearchControls ctrls = new SearchControls();
                                             ctrls.setSearchScope(SearchControls.SUBTREE_SCOPE);
                                             String[] attrIDs = { "distinguishedName",
                    "sn",
                    "givenname",
                    "mail",
                    "telephonenumber",
                    "memberOf",
                    "employeeid"};
                                             ctrls.setReturningAttributes(attrIDs);

                                             final Hashtable env = new Hashtable();
                                             env.put(Context.INITIAL_CONTEXT_FACTORY, contextFactory);
                                             env.put(Context.PROVIDER_URL, ldapHost);
                                             env.put(Context.SECURITY_AUTHENTICATION, "simple");
                                             env.put(Context.SECURITY_PRINCIPAL, user.getMsId() + "@" + domain);
                                             env.put(Context.SECURITY_CREDENTIALS, user.getPassword());

                                             ldap = new InitialLdapContext(env, null);
                                             NamingEnumeration<SearchResult> result  = ldap.search(searchBase, filter, ctrls);
                                             if(result.hasMore()) {
                           SearchResult rs= (SearchResult)result.next();
                           Attributes attrs = rs.getAttributes();
                          String temp = attrs.get("givenname").toString();
                          logger.info("givenname    : " +temp+ temp.substring(temp.indexOf(":")+1));
                           ldapDetails.append(temp.substring(temp.indexOf(":")+1).trim());
                           temp = attrs.get("sn").toString();
                           logger.info("sn         : " + temp.substring(temp.indexOf(":")+1));
                           ldapDetails.append(" ").append(temp.substring(temp.indexOf(":")+1).trim());
                           //temp = attrs.get("mail").toString();
                          // logger.info("Email ID    : " + temp.substring(temp.indexOf(":")+1));
                           logger.info("Ldap Details : " + ldapDetails.toString());

                           if(attrs.get("mail") !=null && !(attrs.get("mail").size()==0)){
                           String email = attrs.get("mail").toString().substring(attrs.get("mail").toString().indexOf(":")+1).trim();
                           logger.info("Email ID    : " + email);
                           map.put("email", email);
                           }

                           String employeeid = attrs.get("employeeid").toString().substring(attrs.get("employeeid").toString().indexOf(":")+1).trim();
                           logger.info("employeeid : " + employeeid);

                           String memberValue= attrs.get("memberOf").toString();
                                         String mvalues = memberValue.substring(memberValue.indexOf(":")+1);
                                         System.out.println("memberValue" +mvalues);
                                         String[] values = mvalues.split(",");

                                         for(int i = 0; i< values.length; i++){
                                  String value=(String) values[i].toString().substring(values[i].indexOf("=")+1);

                                  if(i==values.length-1 && value.startsWith("pdut_ui"))
                                  {
                                                groupsValues.append(value);
                                  }
                                  else if(value.startsWith("pdut_ui")){
                                                               groupsValues.append(value).append(",");
                                                }
                                             }
                           map.put("fullname", ldapDetails.toString());
                           map.put("employeeid", employeeid);
                           map.put("memberOf", groupsValues.toString());

                     }
                              } catch (final AuthenticationException ex) {
                                             ex.printStackTrace();
                                             throw new AuthenticationException("Error in validating ldap: " + ex.getMessage());
                              }
                              catch (final NamingException ex) {
                                             ex.printStackTrace();
                                             throw new AuthenticationException("Error in validating ldap: " + ex.getMessage());
                              } catch (final Exception e) {
                                             e.printStackTrace();
                                             throw new Exception("Error in ActiveDirectory.authenticate(): " + e.getMessage());
                              } finally {
                                             try {
                                                            ldap.close();
                                             } catch (final Exception e) {
                                                            e.printStackTrace();
                                                            logger.error("Exception occurred:" + e.getMessage());
                                             }
                              }
                              return map;

                              }

               /**
               * initializes the parameters.
               * @throws IOException
               */
               private static void init() throws IOException {
                              Properties prop = new Properties();
                              prop.load(LdapConnector.class.getClassLoader().getResourceAsStream("LdapConfig.properties"));

                              domain = prop.getProperty("ldap.domain").trim();
                              searchBase = prop.getProperty("ldap.searchbase").trim();
                              ldapHost = prop.getProperty("ldap.host").trim();
                              searchFilter = prop.getProperty("ldap.searchFilter").trim();
                              contextFactory = prop.getProperty("ldap.contextfactory").trim();
               }
}
